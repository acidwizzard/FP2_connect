#!/usr/bin/env python3
# version 1.3.1
# Connects to FacePay server (SSH tunnel), keeps interactive console active
# after connection for local commands (e.g. snake.exe, exit, etc.)

import subprocess
import ipaddress
import socket
import time
import webbrowser
import pandas as pd
import os
import re
import glob
from collections import defaultdict
import sys

try:
    import curses
    CURSES_AVAILABLE = True
except Exception:
    CURSES_AVAILABLE = False

PASSWORD = "yourpass"
SEARCH_PATTERNS = ["*FP2*.csv", "*fp2*.csv", "FP2.csv", "fp2.csv"]

# ---------------------------------------------------
# File search
# ---------------------------------------------------
def find_csv_in_folder():
    import sys as _sys
    script_dir = os.path.dirname(os.path.abspath(__file__))
    cwd = os.getcwd()
    search_dirs = [script_dir] + ([cwd] if cwd != script_dir else [])

    candidates = []
    for directory in search_dirs:
        for patt in SEARCH_PATTERNS:
            candidates.extend(glob.glob(os.path.join(directory, patt)))

    candidates = [os.path.abspath(p) for p in candidates if os.path.isfile(p)]
    candidates = sorted(set(candidates), key=os.path.getmtime, reverse=True)

    if not candidates:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞ —Å —à–∞–±–ª–æ–Ω–æ–º '*FP2*.csv'.")
        print(f"üìÇ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: {', '.join(search_dirs)}")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        _sys.exit(1)

    return candidates[0]

# ---------------------------------------------------
# Load hosts
# ---------------------------------------------------
def load_hosts(csv_path):
    """
    Returns (hosts_df, ip_to_tnums)
    hosts_df columns: ['display_name', 'ip —Å–µ—Ä–≤–µ—Ä–∞']
    ip_to_tnums: dict ip -> list of turnstile numbers (ints)
    """
    try:
        df = pd.read_csv(csv_path, header=1)
        df.columns = df.columns.str.strip()

        df = df[["–õ–∏–Ω–∏—è", "–í–µ—Å—Ç–∏–±—é–ª—å", "ip —Å–µ—Ä–≤–µ—Ä–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞"]].dropna()
        df["–õ–∏–Ω–∏—è"] = df["–õ–∏–Ω–∏—è"].str.strip()
        df["–í–µ—Å—Ç–∏–±—é–ª—å"] = df["–í–µ—Å—Ç–∏–±—é–ª—å"].str.strip()
        df["ip —Å–µ—Ä–≤–µ—Ä–∞"] = df["ip —Å–µ—Ä–≤–µ—Ä–∞"].astype(str).str.strip()

        ip_to_tnums = defaultdict(list)
        for _, row in df.iterrows():
            ip = row["ip —Å–µ—Ä–≤–µ—Ä–∞"]
            nums = re.findall(r"\d+", str(row["–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞"]))
            ip_to_tnums[ip].extend(map(int, nums))

        df = df.drop_duplicates(subset=["–õ–∏–Ω–∏—è", "–í–µ—Å—Ç–∏–±—é–ª—å", "ip —Å–µ—Ä–≤–µ—Ä–∞"]).copy()

        def format_display(row):
            ip = row["ip —Å–µ—Ä–≤–µ—Ä–∞"]
            if ip_to_tnums[ip]:
                numbers = sorted(set(ip_to_tnums[ip]))
                # show range if multiple
                if numbers:
                    return f"{row['–õ–∏–Ω–∏—è']} {row['–í–µ—Å—Ç–∏–±—é–ª—å']} | –¢—É—Ä–Ω–∏–∫–µ—Ç—ã: {numbers[0]}‚Äì{numbers[-1]} ‚Üí {ip}"
            return f"{row['–õ–∏–Ω–∏—è']} {row['–í–µ—Å—Ç–∏–±—é–ª—å']} ‚Üí {ip}"

        df["display_name"] = df.apply(format_display, axis=1)
        return df[["display_name", "ip —Å–µ—Ä–≤–µ—Ä–∞"]].reset_index(drop=True), dict(ip_to_tnums)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV '{csv_path}': {e}")
        return pd.DataFrame(columns=["display_name", "ip —Å–µ—Ä–≤–µ—Ä–∞"]), {}

# ---------------------------------------------------
# Helpers
# ---------------------------------------------------
def is_valid_ip(ip):
    try:
        ipaddress.ip_address(ip)
        return True
    except ValueError:
        return False

def is_port_open(host, port):
    try:
        with socket.create_connection((host, port), timeout=1):
            return True
    except (OSError, ConnectionRefusedError):
        return False

def wait_for_ports(ports, host="127.0.0.1", timeout=30):
    print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    start = time.time()
    while time.time() - start < timeout:
        if all(is_port_open(host, p) for p in ports):
#            print("‚úÖ –ì–æ—Ç–æ–≤–æ!")
            return True
        time.sleep(0.5)
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–æ–≤.")
    return False

# ---------------------------------------------------
# Fun stuff
# ---------------------------------------------------
def play_snake():
    if not CURSES_AVAILABLE:
        print("‚ö†Ô∏è –ú–æ–¥—É–ª—å curses –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. Snake –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return

    import random, curses
    def _game(stdscr):
        curses.curs_set(0)
        stdscr.nodelay(True)
        stdscr.keypad(True)
        sh, sw = stdscr.getmaxyx()
        win = curses.newwin(sh - 2, sw - 2, 1, 1)
        win.keypad(True)
        win.nodelay(True)
        win.border()
        
        snake = [(sh // 2, sw // 2 + i) for i in range(3)]
        direction = curses.KEY_LEFT
        food = (sh // 3, sw // 3)
        score = 0
        
        while True:
            win.addstr(0, 2, f" Score: {score} ")
            win.addch(food[0], food[1], ord("*"))
            key = win.getch()
            if key in [ord("q"), ord("Q")]:
                break
            moves = {
                curses.KEY_UP: (-1, 0),
                curses.KEY_DOWN: (1, 0),
                curses.KEY_LEFT: (0, -1),
                curses.KEY_RIGHT: (0, 1),
            }
            if key in moves and (direction, key) not in [
                (curses.KEY_UP, curses.KEY_DOWN),
                (curses.KEY_DOWN, curses.KEY_UP),
                (curses.KEY_LEFT, curses.KEY_RIGHT),
                (curses.KEY_RIGHT, curses.KEY_LEFT),
            ]:
                direction = key
            head_y, head_x = snake[0]
            dy, dx = moves.get(direction, (0, 0))
            new_head = (head_y + dy, head_x + dx)
            if (
                new_head in snake
                or new_head[0] in [0, sh - 3]
                or new_head[1] in [0, sw - 3]
            ):
                win.addstr(sh // 2, sw // 3, f"GAME OVER! SCORE: {score}")
                win.nodelay(False)
                win.getch()
                break
            snake.insert(0, new_head)
            if new_head == food:
                score += 1
                food = (random.randint(1, sh - 4), random.randint(1, sw - 4))
            else:
                tail = snake.pop()
                win.addch(tail[0], tail[1], ord(" "))
            win.addch(new_head[0], new_head[1], ord("#"))
            time.sleep(0.1)
            
    curses.wrapper(_game)

# ---------------------------------------------------
# Interactive selection (restores old behavior)
# ---------------------------------------------------
def select_ip(hosts_df, ip_to_tnums):
    """
    Interactive: prompt user until they provide an IP or choose from matches.
    Accepts:
      - direct IP (validated)
      - a station substring -> lists matches and allows numeric selection
      - a single number -> tries to match by turnstile number across ip_to_tnums
    """
    while True:
        user_input = input("–í–≤–µ–¥–∏—Ç–µ IP –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏: ").strip()

        # Clown easter egg: user types the prompt itself
        if user_input.lower() in {"ip –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏", "ip –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏:"}:
            print("–ù–∞—á–∏–Ω–∞—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ /home/..")
            time.sleep(0.8)
            for i in [3, 2, 1]:
                print(f"{i}...")
                time.sleep(0.6)
            print("ü§°\n–•–∞-—Ö–∞, –æ—á–µ–Ω—å —Å–º–µ—à–Ω–æ, –∫–ª–æ—É–Ω—è—Ä–∞!\n")
            continue
            
        # –ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç!
        if user_input.lower() in {"–ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç!", "–ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç!", "–ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç", "–ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç", "–ø—Ä–æ–±–ª–µ–º—ã", "–ø—Ä–æ–±–ª–µ–º—ã?", "–µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã?", "fp2", "fp2.0"}:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç! ‚úÖ")
            continue

        # –ö–æ–≥–¥–∞ –≤–µ–±–∫–∞?
        if user_input.lower() in {"–∫–æ–≥–¥–∞ –≤–µ–±–∫–∞?", "–∫–æ–≥–¥–∞ –≤–µ–±–∫–∞", "–∫–æ–≥–¥–∞ –≤–µ–±–∫–∞?"}:
            print("@ddddori25")
            continue
            
        # –í–µ—Ä–∞
        if user_input.lower() in {"–í–µ—Ä–∞"}:
            print("–§–ü")
            continue
            
        # 42
        if user_input.lower() in {
            "–≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤–æ–æ–±—â–µ",
            "–≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤–æ–æ–±—â–µ",
            "–ì–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤–æ–æ–±—â–µ",
        }:
            print("42")
            continue

        # If it's a valid IP, return it
        if is_valid_ip(user_input):
            return user_input

        # If input is pure digits, try to match turnstile number
        if re.fullmatch(r"\d+", user_input):
            num = int(user_input)
            matches = []
            for ip, nums in ip_to_tnums.items():
                if num in nums:
                    # find display name for that ip
                    disp = hosts_df[hosts_df["ip —Å–µ—Ä–≤–µ—Ä–∞"] == ip]["display_name"].tolist()
                    display_name = disp[0] if disp else f"‚Üí {ip}"
                    matches.append((display_name, ip))
            if len(matches) == 1:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞: {matches[0][0]}")
                return matches[0][1]
            elif len(matches) > 1:
                print("üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ—Å—Ç–æ–≤ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞:")
                for i, (disp, ip) in enumerate(matches, start=1):
                    print(f"  {i}: {disp}")
                while True:
                    try:
                        choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: "))
                        if 1 <= choice <= len(matches):
                            return matches[choice - 1][1]
                        else:
                            print("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    except Exception:
                        print("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                # falls back to re-prompt if invalid
            else:
                print("‚õî –ü–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–≤–æ–¥.")
                continue

        # Otherwise try to match against station list (case-insensitive substring)
        mask = hosts_df["display_name"].str.contains(user_input, case=False, na=False)
        matches = hosts_df[mask].reset_index(drop=True)

        if len(matches) == 0:
            print("‚õî –°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n")
            continue
        elif len(matches) == 1:
            row = matches.iloc[0]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {row['display_name']}")
            return row["ip —Å–µ—Ä–≤–µ—Ä–∞"]
        elif len(matches) <= 9:
            while True:
                print("üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                for i, row in matches.iterrows():
                    print(f"  {i + 1}: {row['display_name']}")
                try:
                    choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: "))
                    if 1 <= choice <= len(matches):
                        return matches.iloc[choice - 1]["ip —Å–µ—Ä–≤–µ—Ä–∞"]
                    else:
                        print("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")
                except Exception:
                    print("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")
        else:
            print(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –£—Ç–æ—á–Ω–∏—Ç–µ –≤–≤–æ–¥.")

# ---------------------------------------------------
# Connection + interactive local commands
# ---------------------------------------------------
def interactive_console(proc):
    print("\nüü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã:")
    print("  - exit / quit / —Åtrl+C ‚Üí –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤—ã–π—Ç–∏\n")

    while True:
        try:
            cmd = input("üß© > ").strip().lower()
            if cmd in ("exit", "quit"):
                print("‚ùå –û—Ç–∫–ª—é—á–∞—é—Å—å...")
                proc.terminate()
                proc.wait()
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                break
            elif cmd in ("snake.exe", "snake"):
                play_snake()
        except KeyboardInterrupt:
            print("\n‚õî –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            proc.terminate()
            break

# ---------------------------------------------------
# Main
# ---------------------------------------------------
def main():
    csv_file = find_csv_in_folder()
    hosts_df, ip_to_tnums = load_hosts(csv_file)
    if hosts_df.empty:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Ö–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    ip = select_ip(hosts_df, ip_to_tnums)

    ssh_command = [
        "sshpass", "-p", PASSWORD,
        "ssh", "proxyhost@10.250.10.15",
        "-N",
        f"-L5160:{ip}:5160",
        f"-L7280:{ip}:7280",
    ]

    print("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å...\n")
    proc = subprocess.Popen(ssh_command)

    if wait_for_ports([5160, 7280]):
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print("VL: http://127.0.0.1:5160")
        print("TV: http://127.0.0.1:7280")
        print("–ö–æ–Ω—Ñ–∏–≥ TV: http://127.0.0.1:7280/api/camera/nnn\n")
        webbrowser.open("http://127.0.0.1:5160")
        webbrowser.open("http://127.0.0.1:7280")
        interactive_console(proc)
    else:
        print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ, –∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å.")
        proc.terminate()

if __name__ == "__main__":
    main()
