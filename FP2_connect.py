#!/usr/bin/env python3
# version 1.6
# Connects to FacePay server (SSH tunnel), keeps interactive console active
# after connection for local commands (e.g. snake.exe, exit, etc.)

import subprocess
import ipaddress
import socket
import time
import webbrowser
import pandas as pd
import os
import re
import glob
from collections import defaultdict
import sys

try:
    import curses
    CURSES_AVAILABLE = True
except Exception:
    CURSES_AVAILABLE = False

PASSWORD = "yourpass"
SEARCH_PATTERNS = ["*FP2*.csv", "*fp2*.csv", "FP2.csv", "fp2.csv"]

# ---------------------------------------------------
# File search
# ---------------------------------------------------
def find_csv_in_folder():
    import sys as _sys
    script_dir = os.path.dirname(os.path.abspath(__file__))
    cwd = os.getcwd()
    search_dirs = [script_dir] + ([cwd] if cwd != script_dir else [])

    candidates = []
    for directory in search_dirs:
        for patt in SEARCH_PATTERNS:
            candidates.extend(glob.glob(os.path.join(directory, patt)))

    candidates = [os.path.abspath(p) for p in candidates if os.path.isfile(p)]
    candidates = sorted(set(candidates), key=os.path.getmtime, reverse=True)

    if not candidates:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞ —Å —à–∞–±–ª–æ–Ω–æ–º '*FP2*.csv'.")
        print(f"üìÇ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: {', '.join(search_dirs)}")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        _sys.exit(1)

    return candidates[0]

# ---------------------------------------------------
# Load hosts
# ---------------------------------------------------
def load_hosts(csv_path):
    try:
        df = pd.read_csv(csv_path, header=1)
        df.columns = df.columns.str.strip()

        df = df[["–õ–∏–Ω–∏—è", "–í–µ—Å—Ç–∏–±—é–ª—å", "ip —Å–µ—Ä–≤–µ—Ä–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞"]].dropna()
        df["–õ–∏–Ω–∏—è"] = df["–õ–∏–Ω–∏—è"].str.strip()
        df["–í–µ—Å—Ç–∏–±—é–ª—å"] = df["–í–µ—Å—Ç–∏–±—é–ª—å"].str.strip()
        df["ip —Å–µ—Ä–≤–µ—Ä–∞"] = df["ip —Å–µ—Ä–≤–µ—Ä–∞"].astype(str).str.strip()

        ip_to_tnums = defaultdict(list)
        for _, row in df.iterrows():
            ip = row["ip —Å–µ—Ä–≤–µ—Ä–∞"]
            nums = re.findall(r"\d+", str(row["–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞"]))
            ip_to_tnums[ip].extend(map(int, nums))

        df = df.drop_duplicates(subset=["–õ–∏–Ω–∏—è", "–í–µ—Å—Ç–∏–±—é–ª—å", "ip —Å–µ—Ä–≤–µ—Ä–∞"]).copy()

        def format_display(row):
            ip = row["ip —Å–µ—Ä–≤–µ—Ä–∞"]
            if ip_to_tnums[ip]:
                numbers = sorted(set(ip_to_tnums[ip]))
                return f"{row['–õ–∏–Ω–∏—è']} {row['–í–µ—Å—Ç–∏–±—é–ª—å']} | –¢—É—Ä–Ω–∏–∫–µ—Ç—ã: {numbers[0]}‚Äì{numbers[-1]} ‚Üí {ip}"
            return f"{row['–õ–∏–Ω–∏—è']} {row['–í–µ—Å—Ç–∏–±—é–ª—å']} ‚Üí {ip}"

        df["display_name"] = df.apply(format_display, axis=1)
        return df[["display_name", "ip —Å–µ—Ä–≤–µ—Ä–∞"]]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV '{csv_path}': {e}")
        return pd.DataFrame(columns=["display_name", "ip —Å–µ—Ä–≤–µ—Ä–∞"])

# ---------------------------------------------------
# Helpers
# ---------------------------------------------------
def is_valid_ip(ip):
    try:
        ipaddress.ip_address(ip)
        return True
    except ValueError:
        return False

def is_port_open(host, port):
    try:
        with socket.create_connection((host, port), timeout=1):
            return True
    except (OSError, ConnectionRefusedError):
        return False

def wait_for_ports(ports, host="127.0.0.1", timeout=30):
    print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è...")
    start = time.time()
    while time.time() - start < timeout:
        if all(is_port_open(host, p) for p in ports):
            print("‚úÖ –¢—É–Ω–Ω–µ–ª—å –≥–æ—Ç–æ–≤!")
            return True
        time.sleep(0.5)
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–æ–≤.")
    return False

# ---------------------------------------------------
# Fun stuff
# ---------------------------------------------------
def show_penis():
    """Funny ASCII art."""
    art = r"""
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†õ‚¢â‚¢â‚†â‚†â‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚††‚°∞‚£ï‚£ó‚£∑‚£ß‚£Ä‚£Ö‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚£†‚£≥‚£ü‚£ø‚£ø‚£∑‚£ø‚°ø‚£ú‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ñ‚£≥‚¢∑‚£ø‚£ø‚£ø‚£ø‚°ø‚£ù‚†ñ‚†Ñ‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚†É‚†Ñ‚¢¢‚°π‚£ø‚¢∑‚£Ø‚¢ø‚¢∑‚°´‚£ó‚†ç‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚°è‚¢Ä‚¢Ñ‚†§‚£Å‚†ã‚†ø‚£ó‚£ü‚°Ø‚°è‚¢é‚†Å‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚†Ñ‚¢î‚¢ï‚£Ø‚£ø‚£ø‚°≤‚°§‚°Ñ‚°§‚†Ñ‚°Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚†á‚††‚°≥‚£Ø‚£ø‚£ø‚£æ‚¢µ‚£´‚¢é‚¢é‚†Ü‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚†Ñ‚¢®‚£´‚£ø‚£ø‚°ø‚£ø‚£ª‚¢é‚°ó‚°ï‚°Ö‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚†Ñ‚¢ú‚¢æ‚£æ‚£ø‚£ø‚£ü‚£ó‚¢Ø‚°™‚°≥‚°Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚†Ñ‚¢∏‚¢Ω‚£ø‚£∑‚£ø‚£ª‚°Æ‚°ß‚°≥‚°±‚°Å‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚°Ñ‚¢®‚£ª‚£Ω‚£ø‚£ü‚£ø‚£û‚£ó‚°Ω‚°∏‚°ê‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚°á‚¢Ä‚¢ó‚£ø‚£ø‚£ø‚£ø‚°ø‚£û‚°µ‚°£‚£ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚°Ä‚°£‚£ó‚£ø‚£ø‚£ø‚£ø‚£Ø‚°Ø‚°∫‚£º‚†é‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ß‚†ê‚°µ‚£ª‚£ü‚£Ø‚£ø‚£∑‚£ü‚£ù‚¢û‚°ø‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚°Ü‚¢ò‚°∫‚£Ω‚¢ø‚£ª‚£ø‚£ó‚°∑‚£π‚¢©‚¢É‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ñ‚†™‚£Ø‚£ü‚£ø‚¢Ø‚£ø‚£ª‚£ú‚¢é‚¢Ü‚†ú‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ñ‚¢£‚£ª‚£Ω‚£ø‚£ø‚£ü‚£æ‚°Æ‚°∫‚°∏‚†∏‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚°ø‚†õ‚†â‚†Å‚†Ñ‚¢ï‚°≥‚£Ω‚°æ‚£ø‚¢Ω‚£Ø‚°ø‚£Æ‚¢ö‚£Ö‚†π‚£ø‚£ø‚£ø
‚°ø‚†ã‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚†í‚†ù‚£û‚¢ø‚°ø‚£ø‚£Ω‚¢ø‚°Ω‚£ß‚£≥‚°Ö‚†å‚†ª‚£ø
‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ê‚°ê‚†±‚°±‚£ª‚°ª‚£ù‚£Æ‚£ü‚£ø‚£ª‚£ü‚£ª‚°∫‚£ä
"""
    print(art)
    time.sleep(1.5)



def play_snake():
    if not CURSES_AVAILABLE:
        print("‚ö†Ô∏è –ú–æ–¥—É–ª—å curses –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. Snake –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return

    import random, curses
    def _game(stdscr):
        curses.curs_set(0)
        stdscr.nodelay(True)
        stdscr.keypad(True)
        sh, sw = stdscr.getmaxyx()
        win = curses.newwin(sh - 2, sw - 2, 1, 1)
        win.keypad(True)
        win.nodelay(True)
        win.border()
        
        snake = [(sh // 2, sw // 2 + i) for i in range(3)]
        direction = curses.KEY_LEFT
        food = (sh // 3, sw // 3)
        score = 0
        
        while True:
            win.addstr(0, 2, f" Score: {score} ")
            win.addch(food[0], food[1], ord("*"))
            key = win.getch()
            if key in [ord("q"), ord("Q")]:
                break
            moves = {
                curses.KEY_UP: (-1, 0),
                curses.KEY_DOWN: (1, 0),
                curses.KEY_LEFT: (0, -1),
                curses.KEY_RIGHT: (0, 1),
            }
            if key in moves and (direction, key) not in [
                (curses.KEY_UP, curses.KEY_DOWN),
                (curses.KEY_DOWN, curses.KEY_UP),
                (curses.KEY_LEFT, curses.KEY_RIGHT),
                (curses.KEY_RIGHT, curses.KEY_LEFT),
            ]:
                direction = key
            head_y, head_x = snake[0]
            dy, dx = moves.get(direction, (0, 0))
            new_head = (head_y + dy, head_x + dx)
            if (
                new_head in snake
                or new_head[0] in [0, sh - 3]
                or new_head[1] in [0, sw - 3]
            ):
                win.addstr(sh // 2, sw // 3, f"GAME OVER! SCORE: {score}")
                win.nodelay(False)
                win.getch()
                break
            snake.insert(0, new_head)
            if new_head == food:
                score += 1
                food = (random.randint(1, sh - 4), random.randint(1, sw - 4))
            else:
                tail = snake.pop()
                win.addch(tail[0], tail[1], ord(" "))
            win.addch(new_head[0], new_head[1], ord("#"))
            time.sleep(0.1)
            
    curses.wrapper(_game)

# ---------------------------------------------------
# Connection + interactive local commands
# ---------------------------------------------------
def interactive_console(proc):
    print("\nüü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã:")
    print("  - exit / quit / —Åtrl+C ‚Üí –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤—ã–π—Ç–∏\n")

    while True:
        try:
            cmd = input("üß© > ").strip().lower()
            if cmd in ("exit", "quit"):
                print("‚ùå –û—Ç–∫–ª—é—á–∞—é—Å—å...")
                proc.terminate()
                proc.wait()
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                break
            elif cmd in ("snake.exe", "snake"):
                play_snake()
        except KeyboardInterrupt:
            print("\n‚õî –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            proc.terminate()
            break

# ---------------------------------------------------
# Main
# ---------------------------------------------------
def main():
    csv_file = find_csv_in_folder()
    hosts_df = load_hosts(csv_file)
    if hosts_df.empty:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —Ö–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    # Choose station - loop so we can re-prompt on clown trigger
    while True:
        user_input = input("–í–≤–µ–¥–∏—Ç–µ IP –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏: ").strip()

        # Clown easter egg: user types the prompt itself
        if user_input.lower() in {"ip –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏", "ip –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏:"}:
            print("–ù–∞—á–∏–Ω–∞—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ /home/..")
            time.sleep(0.8)
            for i in [3, 2, 1]:
                print(f"{i}...")
                time.sleep(0.6)
            print("ü§°\n–•–∞-—Ö–∞, –æ—á–µ–Ω—å —Å–º–µ—à–Ω–æ, –∫–ª–æ—É–Ω—è—Ä–∞!\n")
            continue
        # Penis easter egg            
        if user_input.lower() in {"–ø–µ–Ω–∏—Å", "penis", "–ü–µ–Ω–∏—Å"}:
#            show_penis()
            print("–Ω–µ—Ç.")
            continue
            
        # –ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç!            
        if user_input.lower() in {"–ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç!", "–ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç!", "–ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç", "–ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç"}:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç! ‚úÖ")
            continue      
            
        # –ö–æ–≥–¥–∞ –≤–µ–±–∫–∞?            
        if user_input.lower() in {"–ö–æ–≥–¥–∞ –≤–µ–±–∫–∞?", "–ö–æ–≥–¥–∞ –≤–µ–±–∫–∞", "–∫–æ–≥–¥–∞ –≤–µ–±–∫–∞", "–∫–æ–≥–¥–∞ –≤–µ–±–∫–∞?"}:
            print("@@ddddori25")
            continue
        # 42           
        if user_input.lower() in {"–ì–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤–æ–æ–±—â–µ", "–≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤–æ–æ–±—â–µ", "–≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤–æ–æ–±—â–µ", "–ì–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤–æ–æ–±—â–µ"}:
            print("42")
            continue
                                      
        # If it's a valid IP, use it
        if is_valid_ip(user_input):
            ip = user_input
            break

        # Otherwise try to match against station list
        mask = hosts_df["display_name"].str.contains(user_input, case=False, na=False)
        if mask.any():
            ip = hosts_df[mask].iloc[0]["ip —Å–µ—Ä–≤–µ—Ä–∞"]
            break
        else:
            print("‚õî –°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n")
            # loop again to re-prompt

    ssh_command = [
        "sshpass", "-p", PASSWORD,
        "ssh", "proxyhost@10.250.10.15",
        "-N",
        f"-L5160:{ip}:5160",
        f"-L7280:{ip}:7280",
    ]

    print("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å...\n")
    proc = subprocess.Popen(ssh_command)

    if wait_for_ports([5160, 7280]):
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print("VL: http://127.0.0.1:5160")
        print("TV: http://127.0.0.1:7280")
        print("–ö–æ–Ω—Ñ–∏–≥ TV: http://127.0.0.1:7280/api/camera/nnn\n")
        webbrowser.open("http://127.0.0.1:5160")
        webbrowser.open("http://127.0.0.1:7280")
        interactive_console(proc)
    else:
        print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ, –∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å.")
        proc.terminate()


if __name__ == "__main__":
    main()

